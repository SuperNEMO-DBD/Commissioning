// Standard library:
#include <iostream>
#include <exception>
#include <cstdlib>
#include <numeric> // for mean, sigma
#include <algorithm>
#include <string>

#include "TFile.h"
#include "TTree.h"
#include "TH1F.h"
#include "TH2F.h"


#include <snfee/snfee.h>
#include <snfee/io/multifile_data_reader.h>
#include <snfee/data/raw_trigger_data.h>

// TO ADD
#include <snfee/data/calo_waveform_drawer.h>
#include <snfee/data/calo_waveform_data.h>
#include <snfee/algo/calo_waveform_analysis.h>

// This project:
#include <sncabling/sncabling.h>
#include <sncabling/om_id.h>
#include <sncabling/calo_hv_id.h>
#include <sncabling/calo_hv_cabling.h>
#include <sncabling/label.h>

#include <sncabling/service.h>
#include <sncabling/calo_signal_cabling.h>




bool debug = true;


bool usage(){

  std::clog<<std::endl;
  std::clog<<"+--------------------------------------------------+"<<std::endl;
  std::clog<<"| SuperNEMO calorimeter commissioning tutorial lv2 |"<<std::endl;
  std::clog<<"+--------------------------------------------------+"<<std::endl;

  std::clog<<"How to : "<<std::endl;
  std::clog<<" "<<std::endl;
  std::clog<<"List of option : "<<std::endl;
  std::clog<<"    |->   -i or --input_file "<<std::endl;
  std::clog<<std::endl;
  std::clog<<std::endl;

  std::clog<<"Example : "<<std::endl;
  std::clog<<"snfee-tuto_lv1 -i toto.data.gz"<<std::endl;

  return 1;
  
}

// Main program

int main(int argc, char **argv)
{
  sncabling::initialize();  
  int error_code = EXIT_SUCCESS;
  
  try {
    
    if (argc < 2){
      usage();
      exit;
    }

    std::string filename="default.dat";
    std::string output_filename="default.root";
    
    for(int i = 0;i<argc;i++){
      if(std::string(argv[i]) =="--input_file" || std::string(argv[i]) =="-i" ){filename = argv[i+1];}
      if(std::string(argv[i]) =="--output_file" || std::string(argv[i]) =="-o" ){output_filename = argv[i+1];}
    }
    
   
    TFile a_file(output_filename.c_str(),"RECREATE");


    // Cf tutorial lv0
    sncabling::service snCabling;
    snCabling.initialize_simple();
    
    snfee::io::multifile_data_reader::config_type reader_cfg;
    reader_cfg.filenames.push_back(filename);
    
    snfee::io::multifile_data_reader rtd_source(reader_cfg);
    snfee::data::raw_trigger_data rtd; 


    const sncabling::calo_signal_cabling & caloSignalCabling
      = snCabling.get_calo_signal_cabling();
    

    // Raw calo hit measurement algorithms :
    std::unique_ptr<snfee::algo::calo_waveform_analysis> calo_analysis;
    snfee::algo::calo_waveform_analysis::config_type analysis_cfg;
    calo_analysis.reset(new snfee::algo::calo_waveform_analysis(analysis_cfg));
    calo_analysis->initialize();
    
    bool display_wf    = true;
    /// Waveform drawer:
    std::unique_ptr<snfee::data::calo_waveform_drawer> calo_drawer;
    calo_drawer.reset(new snfee::data::calo_waveform_drawer(0,
							    snfee::model::feb_constants::SAMLONG_DEFAULT_TDC_LSB_NS
							    * snfee::model::feb_constants::SAMLONG_MAX_NUMBER_OF_SAMPLES,
							    snfee::model::feb_constants::SAMLONG_ADC_MIN_VOLTAGE_MV,
							    snfee::model::feb_constants::SAMLONG_ADC_MAX_VOLTAGE_MV / 5,
							    false,
							    true));
    
    
    uint64_t first_tdc = 0;
    uint64_t last_tdc  = 0;

    std::size_t rtd_counter = 0;
    //Main loop
    while (rtd_source.has_record_tag() ) {
      rtd_counter++;
      rtd_source.load(rtd);
      int32_t trigger_id = rtd.get_trigger_id();
      int32_t run_id     = rtd.get_run_id();

      boost::property_tree::ptree options;
      options.put("title", "*** The so cute title ***");

      
      if(rtd_counter < 10)rtd.print_tree(std::clog,options);
      
      std::size_t calo_counter = 0;
      // Loop on calo hit
      for (const auto & p_calo_hit : rtd.get_calo_hits()) {
	const snfee::data::calo_hit_record & calo_hit = *p_calo_hit;
	uint64_t tdc             = calo_hit.get_tdc();        // TDC timestamp (48 bits)
	int32_t  crate_num       = calo_hit.get_crate_num();  // Crate number (0,1,2)
	int32_t  board_num       = calo_hit.get_board_num();  // Board number (0-19)
	int32_t  chip_num        = calo_hit.get_chip_num();   // Chip number (0-7)
        bool     has_waveforms   = calo_hit.has_waveforms(); // Default: true
	
	
	if(rtd_counter == 1) first_tdc = tdc;
	else last_tdc = tdc;
	
	// if(rtd_counter < 10 ){
	//   std::clog <<"--------------------"<<std::endl;
	//   std::clog<<"   |-> tdc          : "<< tdc <<std::endl;
	//   std::clog<<"   |-> tdc(ns)      : "<<  snfee::model::feb_constants::SAMLONG_DEFAULT_TDC_LSB_NS*tdc <<std::endl;
	//}

	
	
	// loop on channels
	for (int ichannel = 0; ichannel < snfee::model::feb_constants::SAMLONG_NUMBER_OF_CHANNELS; ichannel++) {
	  const snfee::data::calo_hit_record::channel_data_record & ch_data = calo_hit.get_channel_data(ichannel);
	  // bool    ch_lt           = ch_data.is_lt();            // Low threshold flag
	  // bool    ch_ht           = ch_data.is_ht();            // High threshold flag
	  // int32_t ch_baseline     = ch_data.get_baseline();     // Computed baseline       (LSB: ADC unit/16)
	  // int32_t ch_peak         = ch_data.get_peak();         // Computed peak amplitude (LSB: ADC unit/8)
	  // int32_t ch_charge       = ch_data.get_charge();       // Computed charge


	  sncabling::calo_signal_id readout_id(sncabling::CALOSIGNAL_CHANNEL,
					       crate_num, 
					       board_num, 
					       snfee::model::feb_constants::SAMLONG_NUMBER_OF_CHANNELS * chip_num + ichannel);
	  

	  // if (caloSignalCabling.has_channel(readout_id)) {
	  //   const sncabling::om_id & calo_id = caloSignalCabling.get_om(readout_id);
	  //   if(rtd_counter < 10 ){
	  //     std::clog <<"ch_ht : "<<ch_ht<<std::endl;
	  //     std::clog <<"readout channel: "<<readout_id.to_label()<<std::endl;
	  //     std::clog <<"   |-> crate   : "<<crate_num<<std::endl;
	  //     std::clog <<"   |-> board   : "<<board_num<<std::endl;
	  //     std::clog <<"   |-> channel : "<<chip_num*2+ichannel<<std::endl;
	  //     std::clog <<"om id : "<<calo_id.to_label()<<std::endl;
	  //     std::clog <<"   |-> side   : "<<calo_id.get_side()<<std::endl;
	  //     std::clog <<"   |-> column : "<<calo_id.get_column()<<std::endl;
	  //     std::clog <<"   |-> row    : "<<calo_id.get_row()<<std::endl;
	  //     std::clog <<"Peak        : "<<ch_peak<<std::endl;
	  //     std::clog <<"Peak(mV)    : "<<ch_peak * snfee::model::feb_constants::SAMLONG_ADC_VOLTAGE_LSB_MV / 8<<std::endl;
	  //     std::clog <<"Charge  : "<<ch_charge<<std::endl;
	  //     std::clog <<"--------------------"<<std::endl;
	  //   }
	  // }

	  // Declare the waveform array for this SAMLONG channel:
          std::vector<uint16_t> ch_waveform;
	  if (has_waveforms) {
	    ch_waveform.reserve(snfee::model::feb_constants::SAMLONG_MAX_NUMBER_OF_SAMPLES);//1024
	    for (int isample = 0; isample <  1024; isample++) {
	      int16_t adc = calo_hit.get_waveforms().get_adc(isample, ichannel); // 0-4095 (ADC)
	      ch_waveform.push_back(adc);
	    }
	  }// can play with WF


	  //channel to look after 
	  sncabling::calo_signal_id control_readout_id(sncabling::CALOSIGNAL_CHANNEL,
					       0, 
					       5, 
					       1);

	  
	  if (display_wf == true){
	    // Working waveform data structure:
	    snfee::data::calo_waveform_info waveform_info;
	    if (calo_drawer) {
	      if (waveform_info.waveform.size() == 0) {
		// If waveform samples are not set yet, fetch them from the RTD
		// and draw the waveform shape:
		int16_t adc_zero  = snfee::model::feb_constants::SAMLONG_ADC_ZERO;
		snfee::algo::calo_waveform_analysis::populate_waveform(ch_waveform,
								       waveform_info.waveform,
								       snfee::model::feb_constants::SAMLONG_DEFAULT_TDC_LSB_NS,
								       snfee::model::feb_constants::SAMLONG_ADC_ZERO,
								       snfee::model::feb_constants::SAMLONG_ADC_VOLTAGE_LSB_MV);
	      }

	      std::string counter_str = std::to_string(rtd_counter);
	      std::string const tmp_title { "event : " + counter_str + " ch : " + readout_id.to_label().to_string()};
	      if(rtd_counter == 1 || readout_id == control_readout_id)calo_drawer->draw(waveform_info,tmp_title,readout_id.to_label().to_string() );
		//calo_drawer->draw(waveform_info, "TOTO", readout_id.to_label().to_string());
		//calo_drawer->draw(waveform_info, "", readout_id.to_label().to_string());
		//
	    }


	    snfee::data::channel_id ch_id;
	    ch_id.from_string(readout_id.to_label().to_string());
	    
	    if (calo_analysis) {
	      calo_analysis->init_from_raw_data(ch_id, ch_data, ch_waveform, waveform_info);
	      calo_analysis->do_measurements(ch_id, waveform_info);
	      waveform_info.print(std::cerr, "Waveform info : ", "[debug] ");

	      std::clog<<"**** computed charge based on waveform and snfee::algo : "<<std::endl;
	      waveform_info.charge.print(std::clog,"");
	      std::clog<<"  |-> start : "<<waveform_info.charge.start_time_ns<<std::endl;
	      std::clog<<"  |-> stop  : "<<waveform_info.charge.stop_time_ns<<std::endl;


	    }
	    


	    
	  }
	  
	}//end of channels
      }//end of calohit
    }//end of file


    uint64_t run_duration=snfee::model::feb_constants::SAMLONG_DEFAULT_TDC_LSB_NS*(last_tdc-first_tdc);
    
    std::clog<<"====== Summary ========="<<std::endl;
    std::clog<<std::endl;
    std::clog<<std::endl;

    std::clog<<"Run duration : "<<run_duration<<" ns"<<std::endl;
    std::clog<<"Nb of entry  : "<<rtd_counter<<std::endl;
    
    a_file.Write();
    a_file.Close();

    

  } catch (std::exception & error) {
    std::cerr << "[error] " << error.what() << std::endl;
    error_code = EXIT_FAILURE;
  }
  sncabling::terminate();
  return error_code;
}
